from django.contrib import admin
from django.shortcuts import redirect
from django.utils.html import format_html
from django.urls import reverse

from .models import SupportTicket, TicketSource


class SourceTypeListFilter(admin.SimpleListFilter):
    title = 'Source Type'
    parameter_name = 'source_type'

    def lookups(self, request, model_admin):
        return (
            ('human', 'Human-submitted'),
            ('autogenerated', 'Autogenerated'),
        )

    def queryset(self, request, queryset):
        if self.value() == 'autogenerated':
            return queryset.exclude(source__in=(
                TicketSource.ADMIN,
                TicketSource.SUPPORT_PAGE,
                TicketSource.EMAIL,
                TicketSource.TABLE_REPORT_BUG,
            ))

        if self.value() == 'human':
            return queryset.filter(source__in=(
                TicketSource.ADMIN,
                TicketSource.SUPPORT_PAGE,
                TicketSource.EMAIL,
                TicketSource.TABLE_REPORT_BUG,
            ))


def mark_closed(modeladmin, request, queryset):
    queryset.update(status='closed')


class SupportTicketAdmin(admin.ModelAdmin):
    list_display = ('short_id', 'opened', 'status', 'subject',
                    'reported_by', 'table', 'source', 'modified',
                    'artifacts', 'artifacts_zip_link', 'debugger_links')
    list_filter = ('status', SourceTypeListFilter, 'source')
    actions = (mark_closed,)

    change_form_template = "support/admin/supportticket_changeform.html"

    def change_view(self, request, object_id, form_url='', extra_context=None):
        from .artifacts import read_communication_log, read_notes

        ticket = SupportTicket.objects.get(id=object_id)

        extra_context = extra_context or {}
        extra_context['ticket_short_id'] = ticket.short_id
        extra_context['ticket_dir'] = ticket.dir.split('/data/')[1]
        extra_context['notes'] = (read_notes(ticket) or 'None logged.').strip()
        extra_context['communications'] = '\n.'.join(
            str(line).strip()
            for line in read_communication_log(ticket) or ['None logged.']
        )
        extra_context['artifacts_links'] = ', '.join(ticket.artifacts)
        return super().change_view(
            request, object_id, form_url, extra_context=extra_context,
        )

    def response_change(self, request, obj):
        if "_make-unique" in request.POST:
            matching_names_except_this = self.get_queryset(request).filter(name=obj.name).exclude(pk=obj.id)
            matching_names_except_this.delete()
            obj.is_unique = True
            obj.save()
            self.message_user(request, "This villain is now unique")
            return redirect(".")
        return super().response_change(request, obj)

    def artifacts_zip_link(self, obj):
        if not obj.artifacts:
            return None
        return format_html(
            '<a href="{}" target="_blank">Download Artifacts</a>',
            reverse('SupportTicketDownload', args=[obj.short_id])
        )

    def debugger_links(self, obj):
        if 'frontend_log.json' in obj.artifacts and \
           'hand_history.json' in obj.artifacts:
            return format_html(
                '''
                    <div>
                        <a href="{}" target="_blank">Frontend Debugger</a><br>
                        <a href="{}" target="_blank">Backend Debugger</a>
                    </div>
                ''',
                reverse('FrontendDebugger', args=[obj.short_id]),
                reverse('BackendDebugger', args=[obj.short_id]),
            )
        if 'frontend_log.json' in obj.artifacts:
            return format_html(
                '<a href="{}" target="_blank">Frontend Debugger</a>',
                reverse('FrontendDebugger', args=[obj.short_id])
            )
        if 'hand_history.json' in obj.artifacts:
            return format_html(
                '<a href="{}" target="_blank">Backend Debugger</a>',
                reverse('BackendDebugger', args=[obj.short_id])
            )

        return None

admin.site.register(SupportTicket, SupportTicketAdmin)
